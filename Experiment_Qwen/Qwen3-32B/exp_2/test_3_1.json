{
  "question": "(E-9)국내 외국인 근로자의 월별 추이는?",
  "llm_answer": "<think>\nOkay, let's tackle this user query: \"(E-9)국내 외국인 근로자의 월별 추이는?\" which translates to \"What is the monthly trend of foreign workers (E-9 visa) in South Korea?\" \n\nFirst, I need to understand the data structure. The provided table is 3_tb_foreign_workers_permit, and the file is an Excel sheet. The relevant columns are base_ym (year-month), cnt (count of foreigners), sido (province), upjong (industry). The user wants the monthly trend, so the output should show the number of E-9 visa holders each month.\n\nI need to ensure that the base_ym is properly formatted. Since the user mentioned it's stored as a string, maybe there are inconsistencies like dashes or periods. So, I'll use REPLACE to clean 'base_ym' into YYYYMM format. For example, if it's '2023-04', replacing '-' gives '202304', which is a valid 6-digit year-month.\n\nNext, grouping by the cleaned year-month and summing the 'cnt' to get the total each month. The SUM function should be NULL-safe, so using COALESCE to default to 0 if there's no data for a month. \n\nOrdering by year-month is important to show the trend over time. The monthly value needs to be ordered correctly, so converting the cleaned string to an integer for sorting.\n\nIncluding 'base_ym' as the month column in the output, ensuring it's in the proper format. Also, since the user wants the trend, the output should have the month and the count each month. No need for province or industry here unless the user specified, but the question is general.\n\nCheck if there's any filtering needed. The question doesn't mention specific provinces or industries, so no WHERE clauses are needed. Just aggregate all data.\n\nDouble-check the SQL syntax for SQLite compatibility. Using TRIM and UPPER to handle any case or whitespace issues in base_ym. Wait, the user's meta_description doesn't mention any alias for categories, so maybe just normalizing the base_ym as is.\n\nPutting it all together: Clean base_ym, group by it, sum the counts, order by year-month. The final output should show each month and the total count.\n</think>\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"3_외국인근로자.xlsx\"\nTBL_RAW = \"3_tb_foreign_workers_permit\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\nsql = '''\nSELECT\n  REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','') AS base_ym,\n  COALESCE(SUM(CAST(upjong AS INT)), 0) AS total_workers\nFROM {Q_TBL}\nGROUP BY REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','')\nORDER BY CAST(REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','') AS INT)\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. payload(메타+질문)를 보고,\n**오직 하나의** 파이썬 코드블록만 출력한다. 그 코드블록은 SQLite로 **단 하나의 SQL 쿼리**를 실행하고,\n그 결과만 stdout에 출력한다. 설명/해설/추가 텍스트 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 3_외국인근로자.xlsx\n- table_name = 3_tb_foreign_workers_permit\n- description = 비전문취업(E-9) 비자를 가진 외국인 근로자의 업종/지역별 분포를 분기별로 집계한 데이터\n- meta_description =\n\n- base_ym: 기준년월 (문자형)\n- sido: 시도 (문자형)\n- upjong: 업종 (문자형)\n- cnt: 외국인 수 (정수형)\n\n- user_question = (E-9)국내 외국인 근로자의 월별 추이는?\n\n[HARD OUTPUT RULES]\n1) 출력은 정확히 하나의 코드블록: 시작 ```python, 끝 ``` . 코드블록 밖에는 아무것도 출력하지 말 것.\n2) 코드 첫 두 줄은 반드시:\n   import sqlite3\n   import pandas as pd\n3) 파일 저장/자기 재실행/네트워크 호출 금지. stdout만 사용.\n4) 최종 출력은 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n\n[PRELUDE (필수 코드 헤더)]\n- 변수명 고정:\n  FILE = \"<file_name 그대로>\"\n  TBL_RAW = \"<table_name 그대로>\"\n  Q_TBL   = '\"' + TBL_RAW + '\"'\n- 파일 적재:\n  if FILE.lower().endswith(\".xlsx\"): df = pd.read_excel(FILE)\n  else: df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n- con = sqlite3.connect(\":memory:\")\n- df.to_sql(TBL_RAW, con, index=False)\n\n[SQL 문자열 형식]\n- f-string 금지. 아래 형식만 사용:\n  sql = '''\n<완성된 실제 SQL>\n'''.format(Q_TBL=Q_TBL)\n- 테이블 참조는 항상 FROM {Q_TBL} (또는 FROM {{Q_TBL}} 허용).\n- 식별자는 이중따옴표로 인용: \"category\",\"p_year\",\"p_month\",\"cnt\",\"base_ym\",\"sido\",\"sigungu\",\"age\",\"table_nm\",\"upjong\",\"gbn\".\n- DataFrame.query 금지. 모든 필터/집계는 SQL에서 수행.\n- 결과는 질문 의도에 맞는 **최소 열**만 포함하고, 명시적 ORDER BY 포함.\n\n[정규화/안전 규칙]\n- 합계는 항상 NULL 세이프:\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS cnt\n- 문자열 비교는 UPPER(TRIM(...)):\n  UPPER(TRIM(\"category\")), UPPER(TRIM(\"sido\")), UPPER(TRIM(\"sigungu\")), TRIM(\"base_ym\")\n- 지역 강건 매칭 예:\n  (UPPER(TRIM(\"sido\")) IN ('경기','경기도') OR UPPER(TRIM(\"sido\")) LIKE '경기%')\n  (UPPER(TRIM(\"sigungu\")) IN ('화성','화성시') OR UPPER(TRIM(\"sigungu\")) LIKE '화성%')\n- base_ym 정규화(YYYYMM):\n  REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','')\n- 월 두 자리 고정: 4월 → '04' 같은 상수로 직접 기입.\n- 카테고리 별칭(있다면 meta_description.category.alias로 확장):\n  \"장기체류\" → ['장기체류거소','장기체류등록'] 등.\n\n[분기→월 전개(선언된 경우만)]\n- meta_description.quarter_policy가 base_is_quarterly=true면, quarter_map을 사용해 월로 전개:\n  repeat_each_month 또는 use_last_month_of_quarter 정책을 따름.\n\n[의도 처리(일반 규칙)]\n- 질문에서 필요한 상수(연/월/연속 구간/지역/카테고리)를 추출해 **SQL 상수로 직접 기입**.\n- \"특정 시점 단일 값\"은 WHERE로 걸러 행이 없어지지 않게, **조건부 집계**로 한 행을 강제.\n- \"월별/연도별 추이\"는 GROUP BY + ORDER BY.\n- \"분포\"는 차원 열(age 등) + 합계.\n\n[EXAMPLE — 완전히 일반적인 절차만 시연(실제 데이터와 무관)]\n사용자 질문(예): \"2021년 1~3월, 국가=KOREA의 월별 매출 합계?\"\n가상의 스키마(예): [\"order_date\"(YYYY-MM-DD), \"country\", \"amount\"]\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"orders.csv\"\nTBL_RAW = \"orders\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 월(YYYY-MM) 추출 → 2021-01~03, 국가=KOREA, 월별 합계\nsql = '''\nWITH X AS (\n  SELECT\n    SUBSTR(TRIM(\"order_date\"),1,7) AS ym,\n    UPPER(TRIM(\"country\")) AS cty,\n    CAST(\"amount\" AS REAL) AS amt\n  FROM {Q_TBL}\n)\nSELECT\n  CAST(SUBSTR(ym,1,4) AS INT) AS year,\n  CAST(SUBSTR(ym,6,2) AS INT) AS month,\n  COALESCE(SUM(amt),0) AS total_amount\nFROM X\nWHERE ym BETWEEN '2021-01' AND '2021-03'\n  AND cty = 'KOREA'\nGROUP BY CAST(SUBSTR(ym,1,4) AS INT), CAST(SUBSTR(ym,6,2) AS INT)\nORDER BY year, month\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_Qwen\\Qwen3-32B\\exp_2\\test_3_1.py",
    "stdout": "base_ym,total_workers\r\n202203,0\r\n202206,0\r\n202209,0\r\n202212,0\r\n202303,0\r\n202306,0\r\n202309,0\r\n202312,0\r\n202403,0\r\n202406,0\r\n202409,0\r\n202412,0\r\n202503,0"
  },
  "_payload_var": "payload_3_1"
}