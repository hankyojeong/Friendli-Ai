{
  "question": "2023~2025년 3년간 3월 장기체류 외국인 수와 전년 대비 증감률은?",
  "llm_answer": "<think>\nOkay, let's tackle this user question. They want the number of long-term foreign residents and the year-over-year growth rate for March over the 2023-2025 period. \n\nFirst, I need to handle the categories. The '장기체류' is an alias for both '장기체류거소' and '장기체류등록', so I should sum those categories. The policy says to sum them, so I'll use a CASE statement to categorize and sum them.\n\nNext, the time frame is March of each year from 2023 to 2025. I need to filter the records where p_year is in 2023, 2024, 2025 and p_month is 3. Then, for each year, sum the cnt. \n\nTo calculate the year-over-year growth rate, I can use the LAG() function. For each year, subtract the previous year's count from the current year's and divide by the previous year's count. Multiply by 100 to get a percentage. \n\nI need to structure the SQL query to first create a CTE (Common Table Expression) that aggregates the counts by year. Then, in the main query, calculate the growth rate using LAG. The result should show the year, count, and growth rate. \n\nAlso, since the user is asking for March specifically, I'll make sure to filter p_month = 3. The final output should be ordered by year. \n\nWait, the schema has p_year and p_month as integers, so comparing them directly is okay. The cnt should be cast to integer as well since it's a count. \n\nTesting the query structure: the CTE will group by p_year, sum the cnt where category is in the long-term aliases. Then, the main query will use LAG to get the previous year's value. \n\nI should also handle the case where there's no previous year (2023) by defaulting the growth rate to 0 or NULL. But the user probably wants to see 0% for the first year. \n\nFinally, format the output to show the year, count, and growth rate as a percentage, ordered by year.\n</think>\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"1_국내체류외국인.xlsx\"\nTBL_RAW = \"1_tb_resident_foreigners\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\nif FILE.lower().endswith(\".xlsx\"): \n    df = pd.read_excel(FILE)\nelse: \n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\nsql = '''\nWITH LongTerm AS (\n  SELECT \n    \"p_year\",\n    COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS total_cnt\n  FROM {Q_TBL}\n  WHERE \n    UPPER(TRIM(\"category\")) IN ('장기체류거소', '장기체류등록') AND \n    \"p_month\" = 3 AND \n    \"p_year\" BETWEEN 2023 AND 2025\n  GROUP BY \"p_year\"\n)\nSELECT \n  \"p_year\",\n  \"total_cnt\",\n  ROUND(\n    100.0 * (total_cnt - LAG(total_cnt, 1, 0) OVER (ORDER BY \"p_year\")), \n    1\n  ) / NULLIF(LAG(total_cnt, 1) OVER (ORDER BY \"p_year\"), 0) AS yoy_change_pct\nFROM LongTerm\nORDER BY \"p_year\"\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. payload(메타+질문)를 보고,\n**오직 하나의** 파이썬 코드블록만 출력한다. 그 코드블록은 SQLite로 **단 하나의 SQL 쿼리**를 실행하고,\n그 결과만 stdout에 출력한다. 설명/해설/추가 텍스트 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 1_국내체류외국인.xlsx\n- table_name = 1_tb_resident_foreigners\n- description = 국내 체류하고 있는 외국인을 단기체류, 등록외국인, 외국국적동포_거소신고의 3개 카테고리로 구분하고, 각 카테고리별 외국인 수를 월별로 집계한 데이터\n- meta_description =\n\nschema:\n  category: str   # {'단기체류','장기체류거소','장기체류등록'}\n  cnt: int        # 인원수\n  p_year: int     # 예: 2022, 2023, 2024, 2025\n  p_month: int    # 1~12\n\nvalue_alias:\n  # 질문/사용자 표현을 실제 값으로 정규화\n  장기체류: ['장기체류거소','장기체류등록']   # 합산 대상으로 해석\n  등록외국인: ['장기체류등록']\n  외국국적동포_거소신고: ['장기체류거소']\n\npolicies:\n  categories_disjoint: true        # 서로 겹치지 않음 → 합산 안전\n  long_term_policy: sum            # alias가 다수이면 SUM으로 집계\n  time_order: ['p_year','p_month'] # 시계열 정렬 기준\n\nnotes:\n  - 숫자/특수문자로 시작하는 식별자는 SQLite에서 \"...\"로 인용\n  - dtype 강제: cnt,p_year,p_month는 숫자형으로 캐스팅 후 사용\n\n- user_question = 2023~2025년 3년간 3월 장기체류 외국인 수와 전년 대비 증감률은?\n\n[HARD OUTPUT RULES]\n1) 출력은 정확히 하나의 코드블록: 시작 ```python, 끝 ``` . 코드블록 밖에는 아무것도 출력하지 말 것.\n2) 코드 첫 두 줄은 반드시:\n   import sqlite3\n   import pandas as pd\n3) 파일 저장/자기 재실행/네트워크 호출 금지. stdout만 사용.\n4) 최종 출력은 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n\n[PRELUDE (필수 코드 헤더)]\n- 변수명 고정:\n  FILE = \"<file_name 그대로>\"\n  TBL_RAW = \"<table_name 그대로>\"\n  Q_TBL   = '\"' + TBL_RAW + '\"'\n- 파일 적재:\n  if FILE.lower().endswith(\".xlsx\"): df = pd.read_excel(FILE)\n  else: df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n- con = sqlite3.connect(\":memory:\")\n- df.to_sql(TBL_RAW, con, index=False)\n\n[SQL 문자열 형식]\n- f-string 금지. 아래 형식만 사용:\n  sql = '''\n<완성된 실제 SQL>\n'''.format(Q_TBL=Q_TBL)\n- 테이블 참조는 항상 FROM {Q_TBL} (또는 FROM {{Q_TBL}} 허용).\n- 식별자는 이중따옴표로 인용: \"category\",\"p_year\",\"p_month\",\"cnt\",\"base_ym\",\"sido\",\"sigungu\",\"age\",\"table_nm\",\"upjong\",\"gbn\".\n- DataFrame.query 금지. 모든 필터/집계는 SQL에서 수행.\n- 결과는 질문 의도에 맞는 **최소 열**만 포함하고, 명시적 ORDER BY 포함.\n\n[정규화/안전 규칙]\n- 합계는 항상 NULL 세이프:\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS cnt\n- 문자열 비교는 UPPER(TRIM(...)):\n  UPPER(TRIM(\"category\")), UPPER(TRIM(\"sido\")), UPPER(TRIM(\"sigungu\")), TRIM(\"base_ym\")\n- 지역 강건 매칭 예:\n  (UPPER(TRIM(\"sido\")) IN ('경기','경기도') OR UPPER(TRIM(\"sido\")) LIKE '경기%')\n  (UPPER(TRIM(\"sigungu\")) IN ('화성','화성시') OR UPPER(TRIM(\"sigungu\")) LIKE '화성%')\n- base_ym 정규화(YYYYMM):\n  REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','')\n- 월 두 자리 고정: 4월 → '04' 같은 상수로 직접 기입.\n- 카테고리 별칭(있다면 meta_description.category.alias로 확장):\n  \"장기체류\" → ['장기체류거소','장기체류등록'] 등.\n\n[분기→월 전개(선언된 경우만)]\n- meta_description.quarter_policy가 base_is_quarterly=true면, quarter_map을 사용해 월로 전개:\n  repeat_each_month 또는 use_last_month_of_quarter 정책을 따름.\n\n[의도 처리(일반 규칙)]\n- 질문에서 필요한 상수(연/월/연속 구간/지역/카테고리)를 추출해 **SQL 상수로 직접 기입**.\n- \"특정 시점 단일 값\"은 WHERE로 걸러 행이 없어지지 않게, **조건부 집계**로 한 행을 강제.\n- \"월별/연도별 추이\"는 GROUP BY + ORDER BY.\n- \"분포\"는 차원 열(age 등) + 합계.\n\n[EXAMPLE — 완전히 일반적인 절차만 시연(실제 데이터와 무관)]\n사용자 질문(예): \"2021년 1~3월, 국가=KOREA의 월별 매출 합계?\"\n가상의 스키마(예): [\"order_date\"(YYYY-MM-DD), \"country\", \"amount\"]\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"orders.csv\"\nTBL_RAW = \"orders\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 월(YYYY-MM) 추출 → 2021-01~03, 국가=KOREA, 월별 합계\nsql = '''\nWITH X AS (\n  SELECT\n    SUBSTR(TRIM(\"order_date\"),1,7) AS ym,\n    UPPER(TRIM(\"country\")) AS cty,\n    CAST(\"amount\" AS REAL) AS amt\n  FROM {Q_TBL}\n)\nSELECT\n  CAST(SUBSTR(ym,1,4) AS INT) AS year,\n  CAST(SUBSTR(ym,6,2) AS INT) AS month,\n  COALESCE(SUM(amt),0) AS total_amount\nFROM X\nWHERE ym BETWEEN '2021-01' AND '2021-03'\n  AND cty = 'KOREA'\nGROUP BY CAST(SUBSTR(ym,1,4) AS INT), CAST(SUBSTR(ym,6,2) AS INT)\nORDER BY year, month\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_Qwen\\Qwen3-32B\\exp_2\\test_1_5.py",
    "stdout": "p_year,total_cnt,yoy_change_pct\r\n2023,1724809,\r\n2024,1912870,10.90329421982376"
  },
  "_payload_var": "payload_1_5"
}